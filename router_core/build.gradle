def conf = rootProject.ext
def androidConf = conf.android
def dependenciesConf = conf.dependencies
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion androidConf.compileSdkVersion
    buildToolsVersion androidConf.buildToolsVersion

    defaultConfig {
        //统一资源维度
        flavorDimensions androidConf.flavorDimensions
        //敏捷开发
        multiDexEnabled androidConf.multiDexEnabled
        if (conf.packageType == 1)
            applicationId dependenciesConf.applicationId
        minSdkVersion androidConf.minSdkVersion
        targetSdkVersion androidConf.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    // java控制台输出中文乱码
    tasks.withType(JavaCompile) {
        options.encoding = androidConf.encoding
    }
    //兼容java8
    compileOptions {
        sourceCompatibility androidConf.sourceCompatibility
        targetCompatibility androidConf.targetCompatibility
    }
    // 解决重复加载第三方那个jar包问题
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${dependenciesConf.kotlin_stdlib_version}"
    implementation "androidx.core:core-ktx:${dependenciesConf.core_ktx_version}"
    implementation "androidx.appcompat:appcompat:${dependenciesConf.appcompat_version}"
    implementation "androidx.lifecycle:lifecycle-extensions:${dependenciesConf.lifecycle_extensions_version}"
    implementation project(':router_annotation')
}